<types namespace="_idio">
  <embed path="node_modules/@idio/frontend/types/index.xml" namespace ignore="_alaJsx.Config" />
  <embed path="node_modules/@idio/frontend/types/hot-reload.xml" namespace />
  <embed path="node_modules/@a-la/jsx/types/index.xml" />
  <embed path="node_modules/logarithm/types/index.xml" ignore="_logarithm.Hit" />

  <record extends="_idio.FrontEndConfig" name="FrontEndOptions" desc="Options for the frontend.">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop type="boolean|_idio.HotReloadOptions" name="hotReload" opt>
      Options to enable hot reload of exported functions and classes. Can simply pass `true` to activate.
    </prop>
  </record>

  <!-- typal should be able to delete properties -->
  <record extends="_idio.HotReload" name="HotReloadOptions" desc="Overridden options for hot reload.">
    <prop boolean name="getServer" default="false">
      `PRIVATE` do not set this property! _Idio_ will automatically assign this.
    </prop>
    <prop boolean name="watchers" default="false">
      `PRIVATE` do not set this property! Watchers are closed when you call `app.destroy()`.
    </prop>
  </record>

  <record extends="_logarithm.Config" name="LogarithmOptions" desc="Options for logarithm.">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
  </record>

  <record name="JSONBodyOptions" desc="Options for json body parsing.">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
  </record>

  <record name="NeoLudditeOptions" desc="Options for the neoluddite.dev client.">
    <prop string name="key">
      The API key received from the app.
    </prop>
    <prop string name="env" opt>
      The environment (e.g., `dev`/`staging`). The production env must be indicated as `prod` which is billed.
    </prop>
    <prop string name="host" default="https://neoluddite.dev">
      The hostname of the server.
    </prop>
    <prop string name="app" opt>
      The name of the application.
    </prop>
  </record>

  <record name="CsrfCheckOptions" desc="Options for validating a csrf token.">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop boolean name="body" default="true">
      Check for the presence of token in `ctx.request.body` (requires prior Form-Data middleware). Used in POST requests.
    </prop>
    <prop boolean name="query" default="true">
      Check for the presence of token in `ctx.query`. Can be used in GET requests.
    </prop>
  </record>

  <record name="JSONErrorsOptions" desc="Options for serving errors via JSON.">
    <prop boolean name="use" default="false">
      Use this middleware for every request.
    </prop>
    <prop boolean name="exposeStack" default="false">
      Whether to add the `stack` property to the returned object. Don't set to true unless on development environment.
    </prop>
    <prop boolean name="logClientErrors" default="true">
      Whether to print client errors.
    </prop>
    <prop boolean name="clearIdio" default="true">
      Removes `@idio/idio` lines from the error stack.
    </prop>
  </record>

  <embed path="node_modules/@idio/github/types/index.xml"
    ignore="_goa.Middleware,_idio.Context" namespace />
  <embed path="node_modules/@idio/github/types/user.xml" namespace />
  <record name="GitHubOptions" extends="_idio.GithubOAuthConfig" desc="Options for GitHub OAuth.">
    <prop type="!Object<string, ?string>" name="paths">
      Instead of passing one path, multiple paths with different scopes could also be specified, e.g.,
      ```
      paths: {
        '/github': null,
        '/github-email': 'user:email',
      },
      ```
      In this case, giving `redirectPath` is required as it will have to be the same one because _GitHub_ only allows one redirect path per `client_id`.
    </prop>
    <prop boolean name="session" opt>
      `PRIVATE` do not set this property! You'll need to configure `session` above `github` in the middleware config.
    </prop>
  </record>

</types>