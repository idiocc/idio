<types ns="_idio">
  <import from="@typedefs/goa" ns="_goa" name="Application" />
  <import from="@typedefs/goa" ns="_goa" name="Context" />

  <interface name="Application" extends="_goa.Application" desc="The application with some additions.">
    <fn void async name="destroy">
      Terminate all active connections and close the server.
    </fn>
    <prop type="!_idio.Context" name="context">
      The context object for each request.
    </prop>
    <prop type="!Array<!_idio.Middleware>" name="middleware" initial="[]">
      The array with middleware used on the server.
    </prop>
    <fn name="use" return="!_idio.Application">
      <arg type="!_idio.Middleware" name="middleware">The middleware to install.</arg>
      Use the given middleware `fn`. Old-style middleware will be converted.
    </fn>
  </interface>

  <interface name="Request" extends="_goa.Request" desc="The Goa request with additional properties.">
    <prop type="Object" name="body" initial="null">
      Parsed body of the request, extract using _Form Data_ or _JSON Body_ middleware.
    </prop>
  </interface>

  <interface name="Context" extends="_goa.Context" desc="The extension to the standard Goa context with properties set by middleware.">
    <prop name="request" type="!_idio.Request">
      The request instance specific to _Idio_.
    </prop>
    <!-- SESSION -->
    <prop name="session" type="!_idio.Session|undefined">
      The session object for updating, if `session` was installed. Set the `ctx.session` to null to destroy the session.
    </prop>
    <prop name="sessionOptions" type="!_idio.SessionConfig|undefined">
      The options used to create the session middleware. Deep cloned for each request.
    </prop>

    <prop type="?boolean" name="compress" initial="null">
      A flag that can be added to explicitly set whether the response should be compressed by the `compress` middleware.
    </prop>

    <!-- FORM-DATA -->
    <prop type="!Array<_multipart.FormDataFile>|!Object<string, !Array<_multipart.FormDataFile>>|_multipart.FormDataFile" name="files" initial="null">
      Files extracted from the request's form data.
    </prop>
    <prop type="_multipart.FormDataFile" name="file" initial="null">
      A single file extracted from the request's form data.
    </prop>

    <!-- ROUTER -->
    <prop type="?string" name="_matchedRoute" initial="null">
      When middleware was invoked by the router, this will set the url, e.g., `user/:id`.
    </prop>
    <prop type="?string" name="_matchedRouteName" initial="null">
      When middleware was invoked by the router, this will set the route name if the route was created with a name.
    </prop>
    <prop type="?Object" name="params" initial="null">
      The parameters extracted from the router.
    </prop>
    <prop type="?_idio.Router" name="router" initial="null">
      An instance of the router if the middleware was invoked via it.
    </prop>

    <!-- Mount -->
    <prop type="?string" name="mountPath" initial="null">
      When serving files through `mount`, this property will be set to the mount prefix.
    </prop>

    <!-- NeoLuddite -->
    <fn name="neoluddite" void>
      <arg string name="pckg">The package name.</arg>
      <arg string name="item">The usage item.</arg>
      <arg opt type="!Object" name="props">Additional properties to add.</arg>
      Records the item for usage via `neoluddite.dev`.
    </fn>
    <prop type="Array" name="_usage" initial="null">
      An array with accumulated usage events.
    </prop>
  </interface>

  <method name="Middleware" return="(!Promise|void)">
    <arg type="!_idio.Context" name="ctx">The context.</arg>
    <arg type="!Function" name="next" opt>The callback.</arg>
    The function to handle requests which can be installed with the `.use` method.
  </method>
</types>