<types ns="_idio">
  <import from="@typedefs/goa" ns="_goa" name="Application" />
  <import from="@typedefs/goa" ns="_goa" name="Context" />

  <interface name="Application" extends="_goa.Application" desc="The application with some additions.">
    <fn void async name="destroy">
      Terminate all active connections and close the server.
    </fn>
    <prop type="!_idio.Context" name="context">
      The context object for each request.
    </prop>
    <prop type="!Array<!_idio.Middleware>" name="middleware" initial="[]">
      The array with middleware used on the server.
    </prop>
    <fn name="use" return="!_idio.Application">
      <arg type="!_idio.Middleware" name="middleware">The middleware to install.</arg>
      Use the given middleware `fn`. Old-style middleware will be converted.
    </fn>
  </interface>

  <interface name="Context" extends="_goa.Context" desc="The extension to the standard Goa context with properties set by middleware.">
    <!-- SESSION -->
    <prop name="session" type="!_idio.Session|undefined">
      The session object for updating, if `session` was installed. Set the `ctx.session` to null to destroy the session.
    </prop>
    <prop name="sessionOptions" type="!_idio.SessionConfig|undefined">
      The options used to create the session middleware. Deep cloned for each request.
    </prop>

    <prop type="?boolean" name="compress" initial="null">
      A flag that can be added to explicitly set whether the response should be compressed by the `compress` middleware.
    </prop>

    <!-- ROUTER -->
    <prop type="?string" name="_matchedRoute" initial="null">
      When middleware was invoked by the router, this will set the url, e.g., `user/:id`.
    </prop>
    <prop type="?string" name="_matchedRouteName" initial="null">
      When middleware was invoked by the router, this will set the route name if the route was created with a name.
    </prop>
    <prop type="?Object" name="params" initial="null">
      The parameters extracted from the router.
    </prop>
    <prop type="?_goa.Router" name="router" initial="null">
      An instance of the router if the middleware was invoked via it.
    </prop>
  </interface>

  <method name="Middleware" return="(!Promise|void)">
    <arg type="!_idio.Context" name="ctx">The context.</arg>
    <arg type="!Function" name="next" opt>The callback.</arg>
    The function to handle requests which can be installed with the `.use` method.
  </method>
</types>