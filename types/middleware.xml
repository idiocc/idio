<types namespace="_idio">
  <import from="../types/options" ns="_idio" name="CorsOptions" />
  <import from="../types/modules/cors" ns="_goa" name="CorsConfig" />

  <import from="../types/options" ns="_idio" name="StaticOptions" />
  <import from="../types/modules/static" ns="_idio" name="StaticConfig" />

  <import from="../types/options" ns="_idio" name="CompressOptions" />
  <import from="../types/modules" ns="_goa" name="CompressConfig" />

  <import from="../types/options" ns="_idio" name="SessionOptions" />
  <!-- for ctx.sessionOptions -->
  <import from="../types/options" ns="_idio" name="SessionConfig" />
  <import from="../types/modules/session" ns="_idio" name="Session" />

  <import from="../types/options" ns="_idio" name="FormDataOptions" />
  <import from="../types/modules/form-data" ns="_multipart" name="FormDataConfig" />
  <import from="../types/modules/form-data" ns="_multipart" name="FormData" />
  <import from="../types/modules/form-data" ns="_multipart" name="FormDataFile" />
  <import from="../types/modules/form-data" ns="_multipart" name="FormDataField" />

  <import from="../types/options" ns="_idio" name="FrontEndOptions" />
  <import from="../types/options" ns="_idio" name="NeoLudditeOptions" />
  <import from="../types/options" ns="_idio" name="CsrfCheckOptions" />
  <import from="../types/options" ns="_idio" name="JSONErrorsOptions" />
  <import from="../types/options" ns="_idio" name="GitHubOptions" />

  <record name="MiddlewareConfig"
    desc="Middleware configuration for the `idio` server."
    extends="_idio.FnMiddlewareConfig">
    <prop opt type="!_idio.StaticOptions|!Array<!_idio.StaticOptions>" name="static">
      _Static_ middleware options.
    </prop>
    <prop opt type="!_idio.CompressOptions" name="compress">
      _Compression_ middleware options.
    </prop>
    <prop opt type="!_idio.SessionOptions" name="session">
      _Session_ middleware options.
    </prop>
    <prop opt type="!_idio.CorsOptions" name="cors">
      _CORS_ middleware options.
    </prop>
    <prop opt type="!_idio.FormDataOptions" name="form">
      _Form Data_ middleware options for receiving file uploads and form submissions.
    </prop>
    <prop opt type="!_idio.FrontEndOptions" name="frontend">
      _Front End_ middleware allows to serve source code from `node_modules` and transpile JSX.
    </prop>
    <prop opt type="!_idio.NeoLudditeOptions" name="neoluddite">
      Records the usage of middleware to compensate their developers' intellectual work.
    </prop>
    <prop opt type="!_idio.CsrfCheckOptions" name="csrfCheck">
      Enables the check for the presence of session with `csrf` property, and whether it matches the token from either `ctx.request.body` or `ctx.query`.
    </prop>
    <prop opt type="!_idio.GitHubOptions|!Array<!_idio.GitHubOptions>" name="github">
      Sets up a route for GitHub OAuth authentication. The returned middleware will be installed on the `app` automatically so it doesn't need to be passed to the router.
    </prop>
    <prop opt type="!_idio.JSONErrorsOptions|!Array<!_idio.JSONErrorsOptions>" name="jsonErrors">
      Tries all downstream middleware, and if an error was caught, serves a JSON response with `error` and `stack` properties (only if `exposeStack` is set to true). Client errors with status code _4xx_ (or that start with `!`) will have full message, but server errors with status code _5xx_ will only be served as `{ error: 'internal server error '}` and the app will emit an error via `app.emit('error')` so that it's logged.
    </prop>
    <prop opt type="!_idio.JSONBodyOptions" name="jsonBody">
      Allows to parse incoming JSON request and store the result in `ctx.request.body`. Throws 400 when the request cannot be parsed.
    </prop>
  </record>

  <!-- Plain config on top of which the idio middleware is installed. -->
  <type type="!Object<string, !_idio.ConfigItem>" name="FnMiddlewareConfig" desc="Middleware Config With Functions."/>

  <type type="!_goa.Middleware|{ use: boolean, middlewareConstructor: !_idio.MiddlewareConstructor, config: !Object }" name="ConfigItem" desc="An item in middleware configuration."/>

  <method name="MiddlewareConstructor" async return="!_goa.Middleware|!_multipart.FormData">
    <arg type="!_goa.Application" name="app">The application instance.</arg>
    <arg type="!Object" name="config">The config for the item.</arg>
    <arg type="!Object" name="options">Any other additional middleware options.</arg>
    A function used to create middleware. It will generate a middleware function using the options and config.
  </method>
</types>
